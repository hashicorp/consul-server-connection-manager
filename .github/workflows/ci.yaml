name: ci

on:
  push:

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> "${GITHUB_OUTPUT}"

  unit-tests:
    name: unit-tests (consul-version=${{ matrix.consul-version}})
    needs: [get-go-version]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #TODO We should also be testing w/ latest dev here, and ensure
        # these versions are automatically updated as new releases become 
        # available.
        consul-version:
        - 1.15.10
        - 1.16.6
        - 1.17.3
        - 1.18.1
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
    - name: Install Consul
      run: |
        CONSUL_VERSION="${{ matrix.consul-version }}"
        FILENAME="consul_${CONSUL_VERSION}_linux_amd64.zip"
        curl -sSLO "https://releases.hashicorp.com/consul/${CONSUL_VERSION}/${FILENAME}" && \
          unzip "${FILENAME}" -d /usr/local/bin && \
          rm "${FILENAME}"
        consul version
    - name: Test
      run: go test ./... -race

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6.1.0
        with:
          version: v1.57.2

  # This is job is required for branch protection as a required GitHub check
  # because GitHub actions show up as checks at the job level and not the
  # workflow level.  This is currently a feature request:
  # https://github.com/orgs/community/discussions/12395
  #
  # This job must:
  # - be placed after the fanout of a workflow so that everything fans back in
  #   to this job.
  # - "need" any job that is part of the fan out / fan in
  # - include if: always() logic because we may have conditional jobs that this job
  #   needs, and this would potentially get skipped if a previous job got skipped.
  #   The if clause ensures it does not get skipped.
  test-success:
    needs:
      - lint
      - unit-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: evaluate upstream job results
        run: |
          # exit 1 if failure or cancelled result for any upstream job
          # this ensures that we fail the PR check regardless of cancellation, rather than skip-passing it
          # see https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#overview
          if printf '${{ toJSON(needs) }}' | grep -E -i '\"result\": \"(failure|cancelled)\"'; then
            printf "Tests failed or workflow cancelled:\n\n${{ toJSON(needs) }}"
            exit 1
          fi
